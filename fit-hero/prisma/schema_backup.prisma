// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // For email/password auth
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relationships
  accounts Account[]
  sessions Session[]
  player   Player?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Custom Player model for Fit Hero
model Player {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  name      String   // Player's chosen name
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Character type - one of the four character classes
  character Character @default(FITNESS_WARRIOR)

  // Fitness objective
  objective Objective @default(GENERAL_FITNESS)

  // Training environment preference
  trainingEnvironment TrainingEnvironment @default(GYM_TRAINING) @map("training_environment")

  // Dietary restrictions (can have multiple)
  dietaryRestrictions DietaryRestriction[] @map("dietary_restrictions")

  // Forbidden foods - array of strings
  forbiddenFoods String[] @map("forbidden_foods")

  // Personal stats for BMI calculation
  age    Int?    // Age in years
  height Float?  // Height in cm
  weight Float?  // Weight in kg

  // Experience and level system
  level      Int @default(1)
  experience Int @default(0)

  // Relationship with User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Progress tracking relationships
  workoutSessions WorkoutSession[]
  mealPlanEntries MealPlanEntry[]
  weightEntries   WeightEntry[]
  progressStats   ProgressStats?

  @@map("players")
}

// Progress tracking models
model WorkoutSession {
  id          String   @id @default(cuid())
  playerId    String   @map("player_id")
  date        DateTime @default(now())
  completed   Boolean  @default(true)
  workoutType String?  @map("workout_type")
  duration    Int?     // Duration in minutes
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, date])
  @@map("workout_sessions")
}

model MealPlanEntry {
  id        String   @id @default(cuid())
  playerId  String   @map("player_id")
  date      DateTime @default(now())
  completed Boolean  @default(true)
  mealType  String?  @map("meal_type") // breakfast, lunch, dinner, snack
  calories  Int?
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("meal_plan_entries")
}

model WeightEntry {
  id        String   @id @default(cuid())
  playerId  String   @map("player_id")
  weight    Float    // Weight in kg
  date      DateTime @default(now())
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("weight_entries")
}

model ProgressStats {
  id                    String   @id @default(cuid())
  playerId              String   @unique @map("player_id")
  currentWorkoutStreak  Int      @default(0) @map("current_workout_streak")
  longestWorkoutStreak  Int      @default(0) @map("longest_workout_streak")
  totalWorkoutDays      Int      @default(0) @map("total_workout_days")
  currentMealStreak     Int      @default(0) @map("current_meal_streak")
  longestMealStreak     Int      @default(0) @map("longest_meal_streak")
  totalMealPlanDays     Int      @default(0) @map("total_meal_plan_days")
  startingWeight        Float?   @map("starting_weight")
  currentWeight         Float?   @map("current_weight")
  goalWeight            Float?   @map("goal_weight")
  lastWorkoutDate       DateTime? @map("last_workout_date")
  lastMealPlanDate      DateTime? @map("last_meal_plan_date")
  lastWeightUpdate      DateTime? @map("last_weight_update")
  updatedAt             DateTime @updatedAt @map("updated_at")

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("progress_stats")
}

// Enums for player characteristics
enum Character {
  FITNESS_WARRIOR  @map("fitness_warrior")
  CARDIO_RUNNER    @map("cardio_runner")
  AGILITY_NINJA    @map("agility_ninja")
  VITALITY_GUARDIAN @map("vitality_guardian")

  @@map("character")
}

enum Objective {
  BUILD_MUSCLE     @map("build_muscle")
  IMPROVE_CARDIO   @map("improve_cardio")
  LOSE_WEIGHT      @map("lose_weight")
  GENERAL_FITNESS  @map("general_fitness")

  @@map("objective")
}

enum TrainingEnvironment {
  GYM_TRAINING  @map("gym_training")
  HOME_TRAINING @map("home_training")

  @@map("training_environment")
}

enum DietaryRestriction {
  VEGETARIAN   @map("vegetarian")
  VEGAN        @map("vegan")
  GLUTEN_FREE  @map("gluten_free")
  DAIRY_FREE   @map("dairy_free")
  NUT_FREE     @map("nut_free")
  LOW_CARB     @map("low_carb")
  KETO         @map("keto")
  PALEO        @map("paleo")

  @@map("dietary_restriction")
}
